# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
# Fmt Printf debug

## taken from vim-go
# same shortcuts for printing in go 

priority 100

# Fmt Printf debug
# import {inspect} from 'util';
snippet pp "prettyprint object or array"
console.log('> $1\n', inspect(${1:${VISUAL}}, true, null, true))
endsnippet

snippet ppset "prettyprint a Set"
console.log('> $1 (Set)\n', inspect(Array.from(${1:${VISUAL}}, true, null, true))
endsnippet

snippet ppo "prettyprint Obvservable Object or Array"
${1:${VISUAL}}.subscribe((${1:${VISUAL}}_v) => console.log('> $1\n', inspect(${1:${VISUAL}}_v, true, null, true)));
endsnippet

snippet pposet "prettyprint Obvservable Set"
${1:${VISUAL}}.subscribe((set) => console.log('> $1 (Set)\n', inspect(Array.from(set), true, null, true)));
endsnippet

snippet ff "console.log('var', var)"
console.log('$1', ${1:${VISUAL}})
endsnippet

# Fmt Println debug
snippet fn "console.log(...)"
console.log('${1:${VISUAL}}')
endsnippet

# Fmt Printf debug
snippet ffi "console.log(X. IN HERE)"
console.log('${1:${VISUAL}}. IN HERE!')
endsnippet

snippet us.cb "useCallback" w
useCallback(() => {
		$1
	}, [$2])${0:;}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
}, [])${0:;}
endsnippet


